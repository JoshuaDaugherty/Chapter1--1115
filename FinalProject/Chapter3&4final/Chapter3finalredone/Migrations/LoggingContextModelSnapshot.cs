// <auto-generated />
using System;
using Chapter3finalredone.Models.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chapter3finalredone.Migrations
{
    [DbContext(typeof(LoggingContext))]
    partial class LoggingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Chapter3finalredone.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("WorkoutLogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("WorkoutLogId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80f61b87-218d-47e6-b41f-21e81e92d27f",
                            Email = "killerclutch@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Reason = "Lose weight.",
                            SecurityStamp = "4d36d5e8-d402-4226-8784-b37f70546064",
                            TwoFactorEnabled = false,
                            UserName = "Joshua555"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "474a6c48-edaf-444e-a8d7-9b078a922d04",
                            Email = "Random616@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Reason = "Gain weight.",
                            SecurityStamp = "9483a36c-300f-4033-b55f-518bb83b38dc",
                            TwoFactorEnabled = false,
                            UserName = "Random616"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b96eeddb-95ce-48f4-b68f-ea8a8fa9d805",
                            Email = "CoolBeans83@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Reason = "I want to jump higher.",
                            SecurityStamp = "f6050015-00f7-4fd1-9b68-57aa55ad016a",
                            TwoFactorEnabled = false,
                            UserName = "CoolBeans83"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03798abc-f9b4-4ee9-987e-10f89f3f3332",
                            Email = "Fitnessguy454@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Reason = "I want to fill out shirts.",
                            SecurityStamp = "b7247fca-7b01-40aa-acac-86845e90d0a2",
                            TwoFactorEnabled = false,
                            UserName = "Fitnessguy454"
                        });
                });

            modelBuilder.Entity("Chapter3finalredone.Models.DomainModels.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            Description = "A squat is a strength exercise that involves lowering the hips from a standing position and then standing back up.",
                            ExerciseName = "Squats"
                        },
                        new
                        {
                            ExerciseId = 2,
                            Description = "The bench press is a compound exercise that targets the muscles of the upper body.",
                            ExerciseName = "Bench Press"
                        },
                        new
                        {
                            ExerciseId = 3,
                            Description = "The bent-over row is an exercise you can do with dumbbells to work the muscles in the back of the shoulder",
                            ExerciseName = "Row"
                        },
                        new
                        {
                            ExerciseId = 4,
                            Description = "A barbell curl is a variation of the biceps curl that uses a weighted barbell. ",
                            ExerciseName = "Barbell Curl"
                        });
                });

            modelBuilder.Entity("Chapter3finalredone.Models.DomainModels.WorkoutLog", b =>
                {
                    b.Property<int>("WorkoutLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutLogId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WorkoutLogId");

                    b.HasIndex("UserId");

                    b.ToTable("Workouts");

                    b.HasData(
                        new
                        {
                            WorkoutLogId = 1,
                            Date = new DateOnly(2021, 10, 1),
                            Notes = "I struggled with leg day.",
                            UserId = "1"
                        },
                        new
                        {
                            WorkoutLogId = 2,
                            Date = new DateOnly(2021, 10, 2),
                            Notes = "I did good on squats.",
                            UserId = "2"
                        },
                        new
                        {
                            WorkoutLogId = 3,
                            Date = new DateOnly(2021, 10, 1),
                            Notes = "My form on front rows needs improvement.",
                            UserId = "2"
                        },
                        new
                        {
                            WorkoutLogId = 4,
                            Date = new DateOnly(2021, 10, 2),
                            Notes = "I felt really motivated today.",
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("Chapter3finalredone.Models.DomainModels.WorkoutLogExercise", b =>
                {
                    b.Property<int>("WorkoutLogId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutLogId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("workoutLogExercises");

                    b.HasData(
                        new
                        {
                            WorkoutLogId = 1,
                            ExerciseId = 3
                        },
                        new
                        {
                            WorkoutLogId = 1,
                            ExerciseId = 2
                        },
                        new
                        {
                            WorkoutLogId = 2,
                            ExerciseId = 1
                        },
                        new
                        {
                            WorkoutLogId = 2,
                            ExerciseId = 4
                        },
                        new
                        {
                            WorkoutLogId = 3,
                            ExerciseId = 2
                        },
                        new
                        {
                            WorkoutLogId = 3,
                            ExerciseId = 4
                        },
                        new
                        {
                            WorkoutLogId = 4,
                            ExerciseId = 3
                        },
                        new
                        {
                            WorkoutLogId = 4,
                            ExerciseId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Chapter3finalredone.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasOne("Chapter3finalredone.Models.DomainModels.WorkoutLog", null)
                        .WithMany("Users")
                        .HasForeignKey("WorkoutLogId");
                });

            modelBuilder.Entity("Chapter3finalredone.Models.DomainModels.WorkoutLog", b =>
                {
                    b.HasOne("Chapter3finalredone.Models.DomainModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chapter3finalredone.Models.DomainModels.WorkoutLogExercise", b =>
                {
                    b.HasOne("Chapter3finalredone.Models.DomainModels.Exercise", "Exercise")
                        .WithMany("WorkoutLogExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chapter3finalredone.Models.DomainModels.WorkoutLog", "WorkoutLog")
                        .WithMany("WorkoutLogExercises")
                        .HasForeignKey("WorkoutLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutLog");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Chapter3finalredone.Models.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Chapter3finalredone.Models.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chapter3finalredone.Models.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Chapter3finalredone.Models.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chapter3finalredone.Models.DomainModels.Exercise", b =>
                {
                    b.Navigation("WorkoutLogExercises");
                });

            modelBuilder.Entity("Chapter3finalredone.Models.DomainModels.WorkoutLog", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("WorkoutLogExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
